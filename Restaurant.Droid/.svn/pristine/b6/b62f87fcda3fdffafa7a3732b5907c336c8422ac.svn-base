using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using Android.Content;
using Android.Graphics;
using Android.Locations;
using Android.Net;
using Android.OS;
using Android.Support.Design.Widget;
using Android.Support.V4.App;
using Android.Support.V4.View;
using Android.Views;
using Android.Views.Animations;
using Android.Widget;
using AndroidX.RecyclerView.Widget;
using com.resturant.Droid.Model;
using com.resturant.Droid.Resturant.Activities;
using com.resturant.Droid.Resturant.Adapter;
using com.resturant.Droid.Resturant.Config;
using Newtonsoft.Json;
using Org.Json;
using Volley;
using static Android.App.DownloadManager;
//using Com.Daimajia.Slider.Library;

namespace com.resturant.Droid
{
    public class HomeeeFragment : Android.Support.V4.App.Fragment, RecyclerView.IOnItemTouchListener
    {
        ViewPager viewPager;
        TabLayout tabLayout;
        // PageAdapter pageAdapter;

        TabItem tab1, tab2, tab3, tab4;
        float translationY = 100.00f;
        FloatingActionButton fabMain, fabOne, fabTwo, fabThree, fabfour;

        LinearLayout Search_layout;
        ScrollView scrollView;
        RecyclerView rv_items;
        //SliderLayout banner_slider, featuredslider, home_list_banner;

        OvershootInterpolator interpolator = new OvershootInterpolator();

        private static string TAG1 = "MainActivity";

        bool isMenuOpen = false;

        RecyclerView recyclerViewCate, recyclerViewDEal;
        private bool isSubcat = false;
        string productId;

        TextView loc;
        string latitude, longitude, address, city, state, country, postalCode;
        LocationManager locationManager;
        ISharedPreferences sharedPreferences;
        private List<Category_model> category_modelList = new List<Category_model>();

        ImageView imageView;
        ImageView footerImage;
        int headerIndex;
        Android.Net.Uri[] headerImages;

        private Home_adapter adapter;

        public HomeeeFragment()
        {

        }


        public override View OnCreateView(LayoutInflater inflater, ViewGroup container,
                            Bundle savedInstanceState)
        {
            base.OnCreateView(inflater, container, savedInstanceState);
            View view = inflater.Inflate(Resource.Layout.fragment_home, container, false);
            ((MainActivity)this.Activity).SetTitle(Resource.String.app_name);
            imageView = view.FindViewById<ImageView>(Resource.Id.imageslider);
            footerImage = view.FindViewById<ImageView>(Resource.Id.imagefooterslider);
            headerIndex = 0;


            sharedPreferences = this.Activity.GetSharedPreferences(BaseURL.MyPrefreance, FileCreationMode.Private);
            latitude = sharedPreferences.GetString(BaseURL.LAT, null);
            longitude = sharedPreferences.GetString(BaseURL.LONG, null);
            address = sharedPreferences.GetString(BaseURL.ADDRESS, null);
            city = sharedPreferences.GetString(BaseURL.CITY, null);

            rv_items = (RecyclerView)view.FindViewById(Resource.Id.rv_home);
            //home_list_banner = view.FindViewById(Resource.Id.home_img_slider);

            GridLayoutManager gridLayoutManager = new GridLayoutManager(this.Activity, 3);
            rv_items.SetLayoutManager(gridLayoutManager);
            rv_items.SetItemAnimator(new DefaultItemAnimator());
            rv_items.NestedScrollingEnabled = false;

            Search_layout = (LinearLayout)view.FindViewById(Resource.Id.search_layout);
            scrollView = (ScrollView)view.FindViewById(Resource.Id.scroll_view);
            scrollView.SmoothScrollingEnabled = true;
            if (isOnline())
            {
                HeaderLoadImages();
                FooterLoadImages();
                setHeaderSlideShow();
                makeGetCategoryRequest();
            }

            return view;
        }

        private bool isOnline()
        {
            ConnectivityManager cm = (ConnectivityManager)this.Activity.GetSystemService(Context.ConnectivityService);

            return cm.ActiveNetworkInfo != null && cm.ActiveNetworkInfo.IsConnected;
        }

        private async void makeGetCategoryRequest()
        {

            try
            {
                using (var client = new HttpClient())
                {
                    var getDataUrl = new System.Uri(BaseURL.Categories);
                    var result = await client.GetStringAsync(getDataUrl);
                    var response = JsonConvert.DeserializeObject<ResultArray>(result);
                    string status = response.status;
                    if (status == "200")
                    {
                        var jsonArray = response.data;
                        if (jsonArray.Count() > 0)
                        {
                            for (int i = 0; i < jsonArray.Count(); i++)
                            {
                                Category_model category_Model = new Category_model();
                                if(jsonArray[i].level.ToLower() == "yes" && jsonArray[i].IsStorePublished)
                                {
                                    category_Model.cat_id = jsonArray[i].GroupMastID.ToString();
                                    category_Model.title = jsonArray[i].ItemCategory.ToString();
                                    category_Model.image = jsonArray[i].m_ParentItemImageURL.ToString();
                                    category_modelList.Add(category_Model);
                                }
                            }
                        }
                        adapter = new Home_adapter(category_modelList,Context);
                        rv_items.SetAdapter(adapter);
                        adapter.NotifyDataSetChanged();
                    }
                }
            }
            catch (Exception ex)
            {

            }

        }


        //private void Rv_items_Click(object sender, EventArgs e)
        //{
        //    string getid = category_modelList.IndexOf(sender.position).getCat_id();

        //    Intent intent = new Intent(Activity, typeof(CategoryPage));
        //    intent.PutExtra("cat_id", getid);
        //    intent.PutExtra("title", category_modelList.IndexOf(position).getTitle());
        //    intent.PutExtra("image", category_modelList.IndexOf(position).getImage());
        //    StartActivity(intent);
        //}

        void setHeaderSlideShow()
        {
            Timer timer;
            timer = new Timer();
            timer.Interval = 4000; // Interval to change image (4000 = 4 second per image)
            timer.Elapsed += (sender, e) =>
            {
                showNextHeaderImage();
            };
            timer.Start();
            timer.AutoReset = true;
        }
        void showNextHeaderImage()
        {
            headerIndex++;
            if (headerIndex == headerImages.Length) { headerIndex = 0; }
            Activity.RunOnUiThread(async () => imageView.SetImageBitmap(await GetImageBitmapFromURL(headerImages[headerIndex].ToString())));
        }

        public async void HeaderLoadImages()
        {
            using (var client = new HttpClient())
            {
                var getDataUrl = new System.Uri(BaseURL.BANNER);
                var bannerList = await client.GetStringAsync(getDataUrl);
                var data = JsonConvert.DeserializeObject<List<ImageSlider>>(bannerList);
                if (data.Count > 0)
                {
                    var imageList = data.Select(x => Android.Net.Uri.Parse(x.SliderPath)).ToArray();
                    headerImages = imageList;
                    imageView.SetImageBitmap(await GetImageBitmapFromURL(headerImages[0].ToString()));
                }
                else
                {
                    headerImages = null;
                }
            }
        }
        public async void FooterLoadImages()
        {
            using (var client = new HttpClient())
            {
                var getDataUrl = new System.Uri(BaseURL.secondary_banner);
                var bannerList = await client.GetStringAsync(getDataUrl);
                var url = JsonConvert.DeserializeObject<string>(bannerList);
                footerImage.SetImageBitmap(await GetImageBitmapFromURL(Android.Net.Uri.Parse(url).ToString()));
            }
        }

        private async Task<Bitmap> GetImageBitmapFromURL(string url)
        {
            Bitmap imageBitmap = null;
            var httpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(15) };
            try
            {
                using (var httpResponse = await httpClient.GetAsync(url))
                {
                    if (httpResponse.StatusCode == HttpStatusCode.OK)
                    {
                        using (var webClient = new WebClient())
                        {
                            var imageBytes = webClient.DownloadData(url);
                            if (imageBytes != null && imageBytes.Length > 0)
                            {
                                imageBitmap = BitmapFactory.DecodeByteArray(imageBytes, 0, imageBytes.Length);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return imageBitmap;
            }

            return imageBitmap;
        }


        public bool OnInterceptTouchEvent(RecyclerView recyclerView, MotionEvent @event)
        {
            throw new NotImplementedException();
        }

        public void OnRequestDisallowInterceptTouchEvent(bool disallow)
        {
            throw new NotImplementedException();
        }

        public void OnTouchEvent(RecyclerView recyclerView, MotionEvent @event)
        {

        }
    }

    public class ImageSlider
    {
        public int StoreSliderID { get; set; }
        public string SliderPath { get; set; }
        public string SliderImage { get; set; }
        public string SliderName { get; set; }
        public string ImageData { get; set; }
        public string imgsrc { get; set; }
    }
}

